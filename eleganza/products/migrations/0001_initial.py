# Generated by Django 5.0.12 on 2025-04-05 05:41

import autoslug.fields
import django.core.validators
import django.db.models.deletion
import djmoney.models.fields
import eleganza.core.image_utils
import mptt.fields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='Variant SKU')),
                ('price_modifier_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('price_modifier', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0'), max_digits=14, verbose_name='Price Modifier')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default Variant')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_stock', models.IntegerField(verbose_name='Previous Stock')),
                ('new_stock', models.IntegerField(verbose_name='New Stock')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Change Time')),
            ],
            options={
                'verbose_name': 'Inventory History',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Product Name')),
                ('slug', models.SlugField(unique=True, verbose_name='URL Slug')),
                ('sku', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='SKU')),
                ('description', models.TextField(verbose_name='Description')),
                ('original_price_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('original_price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=14, verbose_name='Original Price')),
                ('selling_price_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('selling_price', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=14, verbose_name='Selling Price')),
                ('final_price_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('final_price', djmoney.models.fields.MoneyField(decimal_places=2, editable=False, max_digits=14, verbose_name='Final Price')),
                ('discount_type', models.CharField(choices=[('none', 'No Discount'), ('fixed', 'Fixed Amount'), ('percentage', 'Percentage')], default='none', max_length=10, verbose_name='Discount Type')),
                ('discount_amount_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3, null=True)),
                ('discount_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), max_digits=14, null=True, verbose_name='Discount Amount')),
                ('discount_percent', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount Percentage')),
                ('has_variants', models.BooleanField(db_index=True, default=False, verbose_name='Has Variants')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='Featured')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('average_rating', models.DecimalField(decimal_places=1, default=0.0, editable=False, max_digits=3, verbose_name='Average Rating')),
                ('review_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Review Count')),
            ],
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100, verbose_name='Option Value')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'ordering': ['attribute__name', 'sort_order', 'value'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('variant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='inventory', serialize=False, to='products.productvariant')),
                ('stock_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total Stock')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, verbose_name='Low Stock Alert')),
                ('last_restock', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Last Restock')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventory Records',
            },
        ),
        migrations.AddField(
            model_name='productvariant',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product'),
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Attribute Name')),
                ('code', models.SlugField(max_length=100, unique=True, verbose_name='Attribute Code')),
                ('is_required', models.BooleanField(default=True, verbose_name='Required')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['code'], name='products_pr_code_df414c_idx')],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='attributes',
            field=models.ManyToManyField(blank=True, related_name='products', to='products.productattribute'),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', autoslug.fields.AutoSlugField(editable=True, populate_from='name', unique=True)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('featured_image', eleganza.core.image_utils.WebPField(COMPRESSION_METHOD=6, HELP_TEXT='Allowed formats: JPEG, PNG, WEBP. Max size: %(max_size)sMB. Max dimension: %(max_dimension)spx.', MAX_DIMENSION=3000, MAX_PIXELS=25000000, MAX_SIZE_MB=5, OUTPUT_FORMAT='WEBP', QUALITY=90, STRIP_METADATA=True, UPLOAD_DIR='products/categories/', blank=True, help_text='Will be automatically converted to WebP format', null=True, upload_to='', verbose_name='Featured Image')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='products.productcategory')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.productcategory'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', eleganza.core.image_utils.WebPField(COMPRESSION_METHOD=6, HELP_TEXT='Allowed formats: JPEG, PNG, WEBP. Max size: %(max_size)sMB. Max dimension: %(max_dimension)spx.', MAX_DIMENSION=3000, MAX_PIXELS=25000000, MAX_SIZE_MB=5, OUTPUT_FORMAT='WEBP', QUALITY=90, STRIP_METADATA=True, UPLOAD_DIR='products/images/', blank=True, help_text='Will be automatically converted to WebP format', null=True, upload_to='', verbose_name='Prodcuts Image')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Image')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('caption', models.CharField(blank=True, max_length=255, verbose_name='Caption')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.productvariant')),
            ],
            options={
                'ordering': ['-is_primary', 'sort_order'],
            },
        ),
        migrations.AddField(
            model_name='productvariant',
            name='options',
            field=models.ManyToManyField(related_name='variants', to='products.productoption'),
        ),
        migrations.AddField(
            model_name='productoption',
            name='attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='products.productattribute'),
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('title', models.CharField(max_length=255, verbose_name='Review Title')),
                ('comment', models.TextField(verbose_name='Review Comment')),
                ('is_approved', models.BooleanField(db_index=True, default=False, verbose_name='Approved')),
                ('helpful_votes', models.PositiveIntegerField(default=0, editable=False, verbose_name='Helpful Votes')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
