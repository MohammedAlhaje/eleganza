# Generated by Django 5.0.12 on 2025-03-24 22:45

import autoslug.fields
import django.core.validators
import django.db.models.deletion
import djmoney.models.fields
import eleganza.products.validators
import mptt.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Full product name for display purposes', max_length=255, verbose_name='Product Name')),
                ('slug', autoslug.fields.AutoSlugField(editable=True, help_text='Unique URL identifier for the product', populate_from='name', unique=True, verbose_name='Product URL Slug')),
                ('sku', models.CharField(db_index=True, help_text='Unique stock keeping unit identifier', max_length=50, unique=True, verbose_name='SKU')),
                ('description', models.TextField(help_text='Detailed product description for customers', verbose_name='Description')),
                ('original_price_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('original_price', djmoney.models.fields.MoneyField(decimal_places=2, help_text="Manufacturer's suggested retail price (MSRP)", max_digits=14, verbose_name='Original Price')),
                ('selling_price_currency', djmoney.models.fields.CurrencyField(choices=[('LYD', 'Libyan Dinar')], default='LYD', editable=False, max_length=3)),
                ('selling_price', djmoney.models.fields.MoneyField(decimal_places=2, help_text='Actual selling price to customers', max_digits=14, verbose_name='Selling Price')),
                ('is_featured', models.BooleanField(default=False, help_text='Prominently display this product in featured sections', verbose_name='Featured Product')),
                ('average_rating', models.DecimalField(decimal_places=1, default=0.0, editable=False, max_digits=3, verbose_name='Average Rating')),
                ('review_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Review Count')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='inventory', serialize=False, to='products.product')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Total physical inventory available', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total Stock')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, help_text='Minimum stock level before restock alert', verbose_name='Low Stock Threshold')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventory Records',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for product category', max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', autoslug.fields.AutoSlugField(editable=True, help_text='Unique URL identifier for the product', populate_from='name', unique=True, verbose_name='Product URL Slug')),
                ('description', models.TextField(blank=True, help_text='Detailed category description for SEO and informational purposes', verbose_name='Description')),
                ('featured_image', models.ImageField(blank=True, help_text='Representative image for the category (max 2000x2000px)', null=True, upload_to=eleganza.products.validators.category_image_path, validators=[eleganza.products.validators.CategoryImageValidator()], verbose_name='Featured Image')),
                ('is_active', models.BooleanField(default=True, help_text='Toggle category visibility in storefront', verbose_name='Active')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Parent category for hierarchical organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='products.productcategory', verbose_name='Parent Category')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(help_text='Main product category for navigation and filtering', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.productcategory', verbose_name='Primary Category'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='High-quality product image (max 4000x4000px)', upload_to=eleganza.products.validators.product_image_path, validators=[eleganza.products.validators.ProductImageValidator()], verbose_name='Image')),
                ('caption', models.CharField(blank=True, help_text='Alt text and image description for accessibility', max_length=255, verbose_name='Caption')),
                ('is_primary', models.BooleanField(default=False, help_text='Main display image for product listings', verbose_name='Primary Image')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order in image galleries (lower numbers first)', verbose_name='Sort Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['-is_primary', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of creation', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(help_text='Rating from 1 (worst) to 5 (best)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('title', models.CharField(help_text='Brief summary of your experience', max_length=255, verbose_name='Review Title')),
                ('comment', models.TextField(help_text='Detailed feedback about the product', verbose_name='Review Comment')),
                ('is_approved', models.BooleanField(default=False, help_text='Approved reviews are visible publicly', verbose_name='Approved')),
                ('helpful_votes', models.PositiveIntegerField(default=0, editable=False, verbose_name='Helpful Votes')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
            },
        ),
    ]
