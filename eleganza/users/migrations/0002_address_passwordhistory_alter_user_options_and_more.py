# Generated by Django 5.0.12 on 2025-03-12 06:41

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import djmoney.models.fields
import eleganza.users.validators
import encrypted_model_fields.fields
import phonenumber_field.modelfields
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Street name and number.', max_length=255)),
                ('city', models.CharField(help_text='City or locality name.', max_length=100)),
                ('state', models.CharField(help_text='State, province, or region.', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal or ZIP code for the address.', max_length=20)),
                ('country', django_countries.fields.CountryField(help_text='Country where the address is located.', max_length=2)),
                ('is_default', models.BooleanField(default=False, help_text="Flag indicating if this is the user's default address.")),
                ('version', models.IntegerField(default=0, help_text='Version number for tracking changes to the address.')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp for soft deletion of the address.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_hash', models.CharField(help_text="Hashed representation of the user's password.", max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this password was set.')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterModelOptions(
            name='user',
            options={},
        ),
        migrations.RemoveField(
            model_name='user',
            name='name',
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.ImageField(blank=True, default='avatars/default.webp', help_text="User's profile picture or avatar. Allowed formats: JPG, JPEG, PNG, WEBP. Max size: 2MB.", null=True, upload_to=eleganza.users.validators.rename_avatar, validators=[eleganza.users.validators.validate_avatar, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp'])]),
        ),
        migrations.AddField(
            model_name='user',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, help_text='Timestamp when the user account was created.'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='user',
            name='data_consent',
            field=models.BooleanField(default=False, help_text='Flag indicating if the user has consented to data processing.'),
        ),
        migrations.AddField(
            model_name='user',
            name='data_consent_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp when the user gave data processing consent.', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='date_of_birth',
            field=models.DateField(blank=True, help_text="User's date of birth for age verification and personalization.", null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='default_currency',
            field=djmoney.models.fields.CurrencyField(default='USD', help_text="User's preferred currency for transactions and pricing.", max_length=3),
        ),
        migrations.AddField(
            model_name='user',
            name='deleted_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp for soft deletion of the user account.', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='email_verified_at',
            field=models.DateTimeField(blank=True, help_text="Timestamp when the user's email was verified.", null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='failed_login_attempts',
            field=models.IntegerField(default=0, help_text='Number of consecutive failed login attempts.'),
        ),
        migrations.AddField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_email_verified',
            field=models.BooleanField(default=False, help_text="Flag indicating if the user's email address has been verified."),
        ),
        migrations.AddField(
            model_name='user',
            name='is_phone_verified',
            field=models.BooleanField(default=False, help_text="Flag indicating if the user's phone number has been verified."),
        ),
        migrations.AddField(
            model_name='user',
            name='language',
            field=models.CharField(default='en', help_text="User's preferred language (ISO 639-1 code).", max_length=10),
        ),
        migrations.AddField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='user',
            name='locked_until',
            field=models.DateTimeField(blank=True, help_text='Timestamp until which the account is locked due to too many failed login attempts.', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='marketing_consent',
            field=models.BooleanField(default=False, help_text='Flag indicating if the user has consented to receive marketing communications.'),
        ),
        migrations.AddField(
            model_name='user',
            name='marketing_consent_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp when the user gave marketing consent.', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='mfa_enabled',
            field=models.BooleanField(default=False, help_text='Flag indicating if multi-factor authentication (MFA) is enabled for the user.'),
        ),
        migrations.AddField(
            model_name='user',
            name='mfa_secret',
            field=encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Encrypted secret key used for MFA (e.g., TOTP).', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='password_updated_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp of the last password change.', null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='phone',
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text="User's phone number in international format.", max_length=128, null=True, region=None, unique=True),
        ),
        migrations.AddField(
            model_name='user',
            name='phone_verified_at',
            field=models.DateTimeField(blank=True, help_text="Timestamp when the user's phone number was verified.", null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='timezone',
            field=timezone_field.fields.TimeZoneField(default='UTC', help_text="User's preferred timezone for displaying dates and times."),
        ),
        migrations.AddField(
            model_name='user',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='Timestamp when the user account was last updated.'),
        ),
        migrations.AddField(
            model_name='user',
            name='version',
            field=models.IntegerField(default=0, editable=False, help_text='Version number for tracking changes and handling concurrency.'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(help_text='Unique email address used for login and communication.', max_length=254, unique=True),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='users_user_phone_9474e8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'deleted_at'], name='users_user_is_acti_d0475d_idx'),
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.ForeignKey(help_text='User associated with this address.', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='user',
            field=models.ForeignKey(help_text='User associated with this password history entry.', on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('user',), name='unique_default_address'),
        ),
        migrations.AlterUniqueTogether(
            name='passwordhistory',
            unique_together={('user', 'password_hash')},
        ),
    ]
