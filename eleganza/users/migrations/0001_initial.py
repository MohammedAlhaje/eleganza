# Generated by Django 5.0.12 on 2025-03-22 05:18

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import djmoney.models.fields
import eleganza.users.validators
import phonenumber_field.modelfields
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('sku', models.CharField(help_text='Stock Keeping Unit (unique product identifier)', max_length=50, unique=True, verbose_name='SKU')),
                ('name', models.CharField(db_index=True, help_text='Public-facing product name', max_length=255, verbose_name='Product Name')),
                ('description', models.TextField(help_text='Detailed product description and features', verbose_name='Description')),
                ('original_price', models.DecimalField(decimal_places=2, help_text="Manufacturer's suggested retail price (MSRP)", max_digits=10, verbose_name='Original Price')),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Actual customer-facing price', max_digits=10, verbose_name='Selling Price')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Available units in inventory', verbose_name='Stock Quantity')),
                ('reserved_stock', models.PositiveIntegerField(default=0, help_text='Units reserved in active carts/orders', verbose_name='Reserved Stock')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('TEAM_MEMBER', 'Team Member')], db_index=True, default='CUSTOMER', max_length=50, verbose_name='User Type')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with that email already exists.'}, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Street name and number', max_length=255, verbose_name='Street Address')),
                ('city', models.CharField(help_text='City or locality name', max_length=100, verbose_name='City')),
                ('postal_code', models.CharField(help_text='Postal or ZIP code', max_length=20, verbose_name='Postal Code')),
                ('country', django_countries.fields.CountryField(help_text='Country code (ISO 3166-1 alpha-2)', max_length=2, verbose_name='Country')),
                ('is_primary', models.BooleanField(default=False, help_text='Mark as default shipping/billing address', verbose_name='Primary Address')),
                ('customer', models.ForeignKey(limit_choices_to={'type': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text="User's phone number in international format (e.g. +12125552368)", max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('is_phone_verified', models.BooleanField(default=False, help_text="Flag indicating if the user's phone number has been verified", verbose_name='Phone Verified')),
                ('data_consent', models.BooleanField(default=False, help_text='Consent for data processing under privacy regulations', verbose_name='Data Consent')),
                ('data_consent_at', models.DateTimeField(blank=True, help_text='Timestamp when data consent was given', null=True, verbose_name='Data Consent Date')),
                ('marketing_consent', models.BooleanField(default=False, help_text='Consent to receive marketing communications', verbose_name='Marketing Consent')),
                ('marketing_consent_at', models.DateTimeField(blank=True, help_text='Timestamp when marketing consent was given', null=True, verbose_name='Marketing Consent Date')),
                ('timezone', timezone_field.fields.TimeZoneField(default='UTC', help_text="User's preferred timezone for system interactions", verbose_name='Timezone')),
                ('language', models.CharField(choices=[('ar', 'Arabic'), ('en', 'English')], default='en', help_text="User's preferred interface language (ISO 639-1 code)", max_length=10, verbose_name='Language')),
                ('default_currency', djmoney.models.fields.CurrencyField(choices=[('EUR', 'Euro'), ('LYD', 'Libyan Dinar'), ('USD', 'US Dollar')], default='USD', help_text='Preferred currency for transactions and pricing', max_length=3)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Count of consecutive failed login attempts', verbose_name='Failed Login Attempts')),
                ('locked_until', models.DateTimeField(blank=True, help_text='Timestamp when account lock expires', null=True, verbose_name='Locked Until')),
                ('password_updated_at', models.DateTimeField(blank=True, help_text='Timestamp of last password change', null=True, verbose_name='Password Updated At')),
                ('date_of_birth', models.DateField(blank=True, help_text='Birth date for age verification purposes', null=True, verbose_name='Date of Birth')),
                ('avatar', models.ImageField(blank=True, default='avatars/default.webp', help_text='Profile image. Allowed formats: JPG/PNG/WEBP. Max size: 2MB', null=True, upload_to=eleganza.users.validators.rename_avatar, validators=[eleganza.users.validators.validate_avatar, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp'])], verbose_name='Avatar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('social', 'Social Media')], default='phone', help_text='Primary method for order notifications and communications', max_length=20, verbose_name='Preferred Contact Method')),
                ('loyalty_points', models.PositiveIntegerField(default=0, help_text='Accumulated points in customer loyalty program', verbose_name='Loyalty Points')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when object was soft-deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reserved', 'Reserved'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20, verbose_name='Order Status')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Final amount including taxes and shipping', max_digits=10, verbose_name='Total Amount')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('customer', models.ForeignKey(limit_choices_to={'type': 'CUSTOMER'}, on_delete=django.db.models.deletion.PROTECT, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_hash', models.CharField(help_text='Hashed representation of the password', max_length=255, verbose_name='Password Hash')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when password was set', verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Password History',
                'verbose_name_plural': 'Password Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount processed', max_digits=10, verbose_name='Amount')),
                ('transaction_id', models.CharField(help_text='Payment gateway reference ID', max_length=255, unique=True, verbose_name='Transaction ID')),
                ('payment_method', models.CharField(help_text='Payment processor used (e.g., Stripe, PayPal)', max_length=50, verbose_name='Payment Method')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='Payment Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='users.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Number of units ordered', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of purchase', max_digits=10, verbose_name='Unit Price')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='users.order', verbose_name='Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Display name for product category', max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(help_text='URL-friendly identifier (auto-generated)', max_length=150, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Detailed category description for SEO and filtering', verbose_name='Description')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for nested hierarchies', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='users.productcategory', verbose_name='Parent Category')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(help_text='Primary product classification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='users.productcategory', verbose_name='Category'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='High-quality product image', upload_to='products/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, help_text='Optional image description for accessibility', max_length=255, verbose_name='Caption')),
                ('is_primary', models.BooleanField(default=False, help_text='Designate as main product image', verbose_name='Primary Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='users.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(help_text='Quality rating from 1 (worst) to 5 (best)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('title', models.CharField(help_text='Brief summary of the review', max_length=255, verbose_name='Review Title')),
                ('comment', models.TextField(help_text='Detailed product feedback', verbose_name='Review Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('customer', models.ForeignKey(limit_choices_to={'type': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='users.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProfitAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Profit amount allocated to team member', max_digits=10, verbose_name='Allocation Amount')),
                ('allocated_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of profit allocation', verbose_name='Allocated At')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profit_allocations', to='users.order', verbose_name='Order')),
                ('team_member', models.ForeignKey(limit_choices_to={'type': 'TEAM_MEMBER'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Team Member')),
            ],
            options={
                'verbose_name': 'Profit Allocation',
                'verbose_name_plural': 'Profit Allocations',
                'ordering': ['-allocated_at'],
            },
        ),
        migrations.CreateModel(
            name='ShoppingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when cart was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last cart modification', verbose_name='Updated At')),
                ('customer', models.OneToOneField(limit_choices_to={'type': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Shopping Cart',
                'verbose_name_plural': 'Shopping Carts',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Number of units to purchase', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when item was added to cart', verbose_name='Added At')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.product', verbose_name='Product')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='users.shoppingcart', verbose_name='Shopping Cart')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['-added_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamMemberProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text="User's phone number in international format (e.g. +12125552368)", max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('is_phone_verified', models.BooleanField(default=False, help_text="Flag indicating if the user's phone number has been verified", verbose_name='Phone Verified')),
                ('data_consent', models.BooleanField(default=False, help_text='Consent for data processing under privacy regulations', verbose_name='Data Consent')),
                ('data_consent_at', models.DateTimeField(blank=True, help_text='Timestamp when data consent was given', null=True, verbose_name='Data Consent Date')),
                ('marketing_consent', models.BooleanField(default=False, help_text='Consent to receive marketing communications', verbose_name='Marketing Consent')),
                ('marketing_consent_at', models.DateTimeField(blank=True, help_text='Timestamp when marketing consent was given', null=True, verbose_name='Marketing Consent Date')),
                ('timezone', timezone_field.fields.TimeZoneField(default='UTC', help_text="User's preferred timezone for system interactions", verbose_name='Timezone')),
                ('language', models.CharField(choices=[('ar', 'Arabic'), ('en', 'English')], default='en', help_text="User's preferred interface language (ISO 639-1 code)", max_length=10, verbose_name='Language')),
                ('default_currency', djmoney.models.fields.CurrencyField(choices=[('EUR', 'Euro'), ('LYD', 'Libyan Dinar'), ('USD', 'US Dollar')], default='USD', help_text='Preferred currency for transactions and pricing', max_length=3)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Count of consecutive failed login attempts', verbose_name='Failed Login Attempts')),
                ('locked_until', models.DateTimeField(blank=True, help_text='Timestamp when account lock expires', null=True, verbose_name='Locked Until')),
                ('password_updated_at', models.DateTimeField(blank=True, help_text='Timestamp of last password change', null=True, verbose_name='Password Updated At')),
                ('date_of_birth', models.DateField(blank=True, help_text='Birth date for age verification purposes', null=True, verbose_name='Date of Birth')),
                ('avatar', models.ImageField(blank=True, default='avatars/default.webp', help_text='Profile image. Allowed formats: JPG/PNG/WEBP. Max size: 2MB', null=True, upload_to=eleganza.users.validators.rename_avatar, validators=[eleganza.users.validators.validate_avatar, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp'])], verbose_name='Avatar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('department', models.CharField(choices=[('sales', 'Sales'), ('support', 'Customer Support'), ('warehouse', 'Warehouse'), ('management', 'Management')], db_index=True, default='sales', help_text='Department assignment for role-based access', max_length=20, verbose_name='Department')),
                ('profit_percentage', models.DecimalField(decimal_places=2, help_text='Percentage of order profits allocated to this team member', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Profit Percentage')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Team Member Profile',
                'verbose_name_plural': 'Team Member Profiles',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when item was added to wishlist', verbose_name='Added At')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist', to='users.customerprofile', verbose_name='Customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Wishlist Item',
                'verbose_name_plural': 'Wishlist Items',
                'ordering': ['-added_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_user_usernam_65d164_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['type'], name='users_user_type_3fc058_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['customer', 'is_primary'], name='users_addre_custome_724408_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together={('customer', 'street', 'city', 'postal_code')},
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['-created_at', 'status'], name='users_order_created_df94b2_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['customer'], name='users_order_custome_68d838_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordhistory',
            index=models.Index(fields=['user', '-created_at'], name='users_passw_user_id_a71921_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_id'], name='users_payme_transac_3ba15d_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='users_payme_status_f6a2aa_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='users_order_order_i_997f04_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['slug'], name='users_produ_slug_d97a87_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['parent'], name='users_produ_parent__1ad680_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='users_produ_sku_7a5d5c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='users_produ_name_bf6596_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='users_produ_categor_fdd57d_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('reserved_stock__lte', models.F('stock_quantity'))), name='reserved_stock_lte_stock'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__lte', models.F('original_price'))), name='selling_price_lte_original'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('sku',), name='unique_active_sku'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_primary'], name='users_produ_product_a193a7_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product', 'rating'], name='users_produ_product_88c373_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['customer'], name='users_produ_custome_c85b6e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'customer')},
        ),
        migrations.AddIndex(
            model_name='profitallocation',
            index=models.Index(fields=['order', 'team_member'], name='users_profi_order_i_95c0b6_idx'),
        ),
        migrations.AddIndex(
            model_name='shoppingcart',
            index=models.Index(fields=['customer'], name='users_shopp_custome_7ca886_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'added_at'], name='users_carti_cart_id_503c2d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'product')},
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['customer', 'added_at'], name='users_wishl_custome_fa6d27_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('customer', 'product')},
        ),
    ]
